openapi: 3.0.0
info:
  title: GIChA
  description: Genshin Impact Characters Application - GIChA -  is a Spring Boot application to manage characters from Genshin Impact.
  contact:
    name: Ing. Ekaterina Lavrova
    email: lavrova@seznam.cz
  version: 1.0.0
tags:
  - name: Character
    description: Character registered in system
servers:
  - url: http://localhost:8080
paths:
  /character:
    post:
      tags:
        - Character
      summary: Add a new Character
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
      responses:
        201:
          description: Character successfully added
    get:
      tags:
        - Character
      summary: Get Character based on name
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfull response with path param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        400:
          description: Invalid name
  /character/allcharacters:
    get:
      tags:
        - Character
      summary: Get all characters from the system
      responses:
        200:
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Characters'
  /character/name/{id}:
    patch:
      tags:
        - Character
      summary: Update an existing Character name
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        202:
          description: Character name updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        404:
          description: Character not found
  /character/birthplace/{id}:
    patch:
      tags:
        - Character
      summary: Update an existing Character birthplace
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: birthplace
          required: true
          schema:
            type: string
            enum: [ 'MONDSTADT','LIYUE','INAZUMA','SUMERU','FONTAINE','NATLAN','SNEZHNAYA', 'UNIVERSE', 'UNKNOWN' ]
      responses:
        202:
          description: Character birthplace updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        404:
          description: Character not found
  /character/element/{id}:
    patch:
      tags:
        - Character
      summary: Update an existing Character element
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: element
          required: true
          schema:
            type: string
            enum: [ 'ADAPTIVE','PYRO','CRYO','ELECTRO','HYDRO','DENDRO','GEO','ANEMO' ]
      responses:
        202:
          description: Character element updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        404:
          description: Character not found
  /character/{id}:
    get:
      tags:
        - Character
      summary: Get Character based on id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successfull response with path param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        400:
          description: Invalid id
    delete:
      tags:
        - Character
      summary: Delete a Character based on id
      parameters:
        - in: path
          name: id
          description: Character id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        204:
          description: Character deleted successfully
        404:
          description: Character not found
        403:
          description: Unauthorized user
        401:
          description: User does not have access rights
    put:
      tags:
        - Character
      summary: Update an existing Character
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/jason:
            schema:
              $ref: '#/components/schemas/Character'
      responses:
        202:
          description: Character successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
  /character/{birthplace}:
    get:
      tags:
        - Character
      summary: Get all characters from any location
      parameters:
        - in: path
          name: birthplace
          required: true
          schema:
            type: string
            enum: [ 'MONDSTADT','LIYUE','INAZUMA','SUMERU','FONTAINE','NATLAN','SNEZHNAYA', 'UNIVERSE', 'UNKNOWN' ]
      responses:
        200:
          description: Successful response with param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Characters'
        404:
          description: Character not found
  /character/{element}:
    get:
      tags:
        - Character
      summary: Get all characters with same element
      parameters:
        - in: path
          name: element
          required: true
          schema:
            type: string
            enum: [ 'ADAPTIVE','PYRO','CRYO','ELECTRO','HYDRO','DENDRO','GEO','ANEMO' ]
            example: PYRO
      responses:
        200:
          description: Successful response with param
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Characters'
        404:
          description: Character not found
components:
  schemas:
    Character:
      type: object
      required:
        - id
        - name
        - element
        - birthplace
      properties:
        id:
          readOnly: true
          type: integer
          format: int64
          example: 34236599
        name:
          type: string
          example: Venti
        element:
          type: string
          enum: [ 'ADAPTIVE','PYRO','CRYO','ELECTRO','HYDRO','DENDRO','GEO','ANEMO' ]
          example: ANEMO
        birthplace:
          type: string
          enum: [ 'MONDSTADT','LIYUE','INAZUMA','SUMERU','FONTAINE','NATLAN','SNEZHNAYA', 'UNIVERSE','UNKNOWN' ]
          example: MONDSTADT
    Characters:
      type: array
      items:
        $ref: '#/components/schemas/Character'